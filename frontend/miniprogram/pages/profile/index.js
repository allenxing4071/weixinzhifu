// profile/index.js - Áîü‰∫ßÁéØÂ¢ÉÁâàÊú¨
const app = getApp()

Page({
  data: {
    userInfo: {
      nickname: 'Âä†ËΩΩ‰∏≠...',
      avatar: '/images/default-avatar.png',
      phone: '',
      level: 1,
      levelName: 'ÊôÆÈÄö‰ºöÂëò'
    },
    pointsInfo: {
      balance: 0,
      totalEarned: 0,
      totalSpent: 0,
      monthlyEarned: 0
    },
    loading: true,
    menuItems: [
      {
        icon: '/images/icons/history.png',
        title: 'ÁßØÂàÜËÆ∞ÂΩï',
        desc: 'Êü•ÁúãÁßØÂàÜËé∑ÂæóÂíå‰ΩøÁî®ËÆ∞ÂΩï',
        url: '/pages/points/history'
      },
      {
        icon: '/images/icons/order.png',
        title: 'ÊîØ‰ªòËÆ∞ÂΩï',
        desc: 'Êü•ÁúãÊîØ‰ªòËÆ¢ÂçïÂéÜÂè≤',
        url: '/pages/payment/history'
      },
      {
        icon: '/images/icons/help.png',
        title: 'Â∏ÆÂä©‰∏≠ÂøÉ',
        desc: 'Â∏∏ËßÅÈóÆÈ¢òÂíå‰ΩøÁî®ÊåáÂçó',
        action: 'showHelp'
      },
      {
        icon: '/images/icons/about.png',
        title: 'ÂÖ≥‰∫éÊàë‰ª¨',
        desc: '‰∫ÜËß£ÁßØÂàÜÂä©Êâã',
        action: 'showAbout'
      }
    ]
  },

  onLoad() {
    console.log('üë§ ‰∏™‰∫∫‰∏≠ÂøÉÈ°µÈù¢Âä†ËΩΩÔºàÁîü‰∫ßÊ®°ÂºèÔºâ')
  },

  onShow() {
    console.log('üë§ ‰∏™‰∫∫‰∏≠ÂøÉÈ°µÈù¢ÊòæÁ§∫')
    
    // Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
    if (!app.isLoggedIn()) {
      this.showLoginPrompt()
      return
    }
    
    this.loadUserData()
  },

  onPullDownRefresh() {
    this.refreshData()
  },

  /**
   * ÊòæÁ§∫ÁôªÂΩïÊèêÁ§∫
   */
  showLoginPrompt() {
    this.setData({
      userInfo: {
        nickname: 'Êú™ÁôªÂΩï',
        avatar: '/images/default-avatar.png',
        phone: '',
        level: 0,
        levelName: 'ËØ∑ÂÖàÁôªÂΩï'
      },
      pointsInfo: {
        balance: 0,
        totalEarned: 0,
        totalSpent: 0,
        monthlyEarned: 0
      },
      loading: false
    })
  },

  /**
   * Âä†ËΩΩÁî®Êà∑Êï∞ÊçÆ
   */
  async loadUserData() {
    try {
      console.log('üë§ Âä†ËΩΩÁî®Êà∑Êï∞ÊçÆ...')
      this.setData({ loading: true })
      
      // Âπ∂Ë°åÂä†ËΩΩÁî®Êà∑‰ø°ÊÅØÂíåÁßØÂàÜ‰ø°ÊÅØ
      const [userResult, pointsResult] = await Promise.all([
        this.loadUserInfo(),
        this.loadPointsInfo()
      ])
      
      if (userResult) {
        this.setData({ userInfo: userResult })
      }
      
      if (pointsResult) {
        this.setData({ pointsInfo: pointsResult })
      }
      
      console.log('‚úÖ Áî®Êà∑Êï∞ÊçÆÂä†ËΩΩÊàêÂäü')
      
    } catch (error) {
      console.error('‚ùå Âä†ËΩΩÁî®Êà∑Êï∞ÊçÆÂ§±Ë¥•:', error)
      
      wx.showToast({
        title: 'Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•',
        icon: 'error'
      })
    } finally {
      this.setData({ loading: false })
    }
  },

  /**
   * Âä†ËΩΩÁî®Êà∑‰ø°ÊÅØ
   */
  async loadUserInfo() {
    try {
      const response = await app.requestAPI('/auth/user-info', 'GET')
      
      if (response.success) {
        const userData = response.data
        
        return {
          nickname: userData.nickname || 'ÂæÆ‰ø°Áî®Êà∑',
          avatar: userData.avatar || '/images/default-avatar.png',
          phone: userData.phone || '',
          level: userData.level || 1,
          levelName: this.getLevelName(userData.level || 1),
          openid: userData.openid,
          registeredAt: userData.registeredAt
        }
      } else {
        throw new Error(response.message || 'Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:', error)
      
      // ‰ªéÊú¨Âú∞ÁºìÂ≠òËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ‰Ωú‰∏∫Â§áÈÄâ
      const cachedUserInfo = app.getUserInfo()
      if (cachedUserInfo) {
        return {
          nickname: cachedUserInfo.nickname || 'ÂæÆ‰ø°Áî®Êà∑',
          avatar: cachedUserInfo.avatar || '/images/default-avatar.png',
          phone: cachedUserInfo.phone || '',
          level: 1,
          levelName: 'ÊôÆÈÄö‰ºöÂëò'
        }
      }
      
      return null
    }
  },

  /**
   * Âä†ËΩΩÁßØÂàÜ‰ø°ÊÅØ
   */
  async loadPointsInfo() {
    try {
      const response = await app.requestAPI('/points/balance', 'GET')
      
      if (response.success) {
        const pointsData = response.data
        
        return {
          balance: pointsData.balance || 0,
          totalEarned: pointsData.totalEarned || 0,
          totalSpent: pointsData.totalSpent || 0,
          monthlyEarned: pointsData.monthlyEarned || 0
        }
      } else {
        throw new Error(response.message || 'Ëé∑ÂèñÁßØÂàÜ‰ø°ÊÅØÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå Ëé∑ÂèñÁßØÂàÜ‰ø°ÊÅØÂ§±Ë¥•:', error)
      return null
    }
  },

  /**
   * Ëé∑Âèñ‰ºöÂëòÁ≠âÁ∫ßÂêçÁß∞
   */
  getLevelName(level) {
    const levelNames = {
      1: 'ÊôÆÈÄö‰ºöÂëò',
      2: 'Èì∂Áâå‰ºöÂëò',
      3: 'ÈáëÁâå‰ºöÂëò',
      4: 'ÈíªÁü≥‰ºöÂëò',
      5: 'Ëá≥Â∞ä‰ºöÂëò'
    }
    return levelNames[level] || 'ÊôÆÈÄö‰ºöÂëò'
  },

  /**
   * Âà∑Êñ∞Êï∞ÊçÆ
   */
  async refreshData() {
    try {
      await this.loadUserData()
    } finally {
      wx.stopPullDownRefresh()
    }
  },

  /**
   * Â§ÑÁêÜËèúÂçïÈ°πÁÇπÂáª
   */
  handleMenuClick(e) {
    const item = e.currentTarget.dataset.item
    
    if (item.url) {
      // È°µÈù¢Ë∑≥ËΩ¨
      wx.navigateTo({
        url: item.url
      })
    } else if (item.action) {
      // ÊâßË°åÁâπÂÆöÂä®‰Ωú
      this[item.action]()
    }
  },

  /**
   * ÊòæÁ§∫Â∏ÆÂä©
   */
  showHelp() {
    wx.showModal({
      title: '‰ΩøÁî®Â∏ÆÂä©',
      content: '1. Êâ´ÊèèÂïÜÊà∑‰∫åÁª¥Á†ÅËøõË°åÊîØ‰ªò\n2. ÊîØ‰ªòÊàêÂäüÂêéËá™Âä®Ëé∑ÂæóÁßØÂàÜ\n3. ÁßØÂàÜÂèØÁî®‰∫éÂÖëÊç¢ÂïÜÂìÅÊàñ‰ºòÊÉ†\n4. Êü•ÁúãÁßØÂàÜËÆ∞ÂΩïÂíåÊîØ‰ªòÂéÜÂè≤',
      showCancel: false
    })
  },

  /**
   * ÊòæÁ§∫ÂÖ≥‰∫é‰ø°ÊÅØ
   */
  showAbout() {
    wx.showModal({
      title: 'ÂÖ≥‰∫éÁßØÂàÜÂä©Êâã',
      content: 'ÁßØÂàÜÂä©Êâã v1.0.0\n\n‰∏Ä‰∏™ÁÆÄÂçïÊòìÁî®ÁöÑÁßØÂàÜÁÆ°ÁêÜÂ∞èÁ®ãÂ∫èÔºåÂ∏ÆÊÇ®ËΩªÊùæÁÆ°ÁêÜÂíå‰ΩøÁî®ÁßØÂàÜÂ•ñÂä±„ÄÇ\n\nÊäÄÊúØÊîØÊåÅÔºöÂçéÂ§èÊï∞Ë∞∑ÁßëÊäÄ',
      showCancel: false
    })
  },

  /**
   * ÊâãÂä®ÁôªÂΩï
   */
  async doLogin() {
    try {
      wx.showLoading({ title: 'ÁôªÂΩï‰∏≠...' })
      
      await app.doWechatLogin()
      
      // ÁôªÂΩïÊàêÂäüÂêéÂà∑Êñ∞Êï∞ÊçÆ
      this.loadUserData()
      
      wx.showToast({
        title: 'ÁôªÂΩïÊàêÂäü',
        icon: 'success'
      })
      
    } catch (error) {
      console.error('‚ùå ÊâãÂä®ÁôªÂΩïÂ§±Ë¥•:', error)
      
      wx.showModal({
        title: 'ÁôªÂΩïÂ§±Ë¥•',
        content: 'ÁôªÂΩïËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØÔºåËØ∑Á®çÂêéÈáçËØï',
        showCancel: false
      })
    } finally {
      wx.hideLoading()
    }
  },

  /**
   * ÈÄÄÂá∫ÁôªÂΩï
   */
  logout() {
    wx.showModal({
      title: 'Á°ÆËÆ§ÈÄÄÂá∫',
      content: 'Á°ÆÂÆöË¶ÅÈÄÄÂá∫ÁôªÂΩïÂêóÔºü',
      success: (res) => {
        if (res.confirm) {
          app.clearLoginState()
          
          wx.showToast({
            title: 'Â∑≤ÈÄÄÂá∫ÁôªÂΩï',
            icon: 'success'
          })
          
          // Êõ¥Êñ∞È°µÈù¢Áä∂ÊÄÅ
          this.showLoginPrompt()
        }
      }
    })
  },

  /**
   * Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØ
   */
  async updateUserInfo() {
    if (!app.isLoggedIn()) {
      this.showLoginPrompt()
      return
    }

    // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
    try {
      const userProfile = await wx.getUserProfile({
        desc: 'Áî®‰∫éÂÆåÂñÑ‰ºöÂëòËµÑÊñô'
      })
      
      const response = await app.requestAPI('/auth/update-profile', 'PUT', {
        nickname: userProfile.userInfo.nickName,
        avatar: userProfile.userInfo.avatarUrl
      })
      
      if (response.success) {
        wx.showToast({
          title: 'ËµÑÊñôÊõ¥Êñ∞ÊàêÂäü',
          icon: 'success'
        })
        
        // Âà∑Êñ∞Áî®Êà∑Êï∞ÊçÆ
        this.loadUserData()
      } else {
        throw new Error(response.message)
      }
      
    } catch (error) {
      console.error('‚ùå Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:', error)
      
      if (error.errMsg && error.errMsg.includes('getUserProfile:cancel')) {
        // Áî®Êà∑ÂèñÊ∂àÊéàÊùÉ
        return
      }
      
      wx.showToast({
        title: 'Êõ¥Êñ∞Â§±Ë¥•',
        icon: 'error'
      })
    }
  },

  /**
   * ËÅîÁ≥ªÂÆ¢Êúç
   */
  contactService() {
    wx.showModal({
      title: 'ËÅîÁ≥ªÂÆ¢Êúç',
      content: 'ÂÆ¢ÊúçÁîµËØùÔºö400-123-4567\nÂ∑•‰ΩúÊó∂Èó¥Ôºö9:00-18:00\nÊàñÁÇπÂáªÁ°ÆÂÆöÂ§çÂà∂ÂÆ¢ÊúçÂæÆ‰ø°Âè∑',
      confirmText: 'Â§çÂà∂ÂæÆ‰ø°',
      success: (res) => {
        if (res.confirm) {
          wx.setClipboardData({
            data: 'points_helper_service',
            success: () => {
              wx.showToast({
                title: 'ÂæÆ‰ø°Âè∑Â∑≤Â§çÂà∂',
                icon: 'success'
              })
            }
          })
        }
      }
    })
  }
})